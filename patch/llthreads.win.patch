*** pre_generated-llthreads.nobj.c	Tue Oct 16 00:52:40 2012
--- pre_generated-llthreads.nobj.c	Thu Nov 29 16:11:51 2012
***************
*** 1505,1511 ****
  }
  
  #ifdef __WINDOWS__
! static void run_child_thread(void *arg) {
  #else
  static void *run_child_thread(void *arg) {
  #endif
--- 1505,1511 ----
  }
  
  #ifdef __WINDOWS__
! static unsigned int __stdcall run_child_thread(void *arg) {
  #else
  static void *run_child_thread(void *arg) {
  #endif
***************
*** 1536,1541 ****
--- 1536,1542 ----
  		/* detached thread, close thread handle. */
  		_endthread();
  	}
+ 	return 0;
  #else
  	return this;
  #endif
***************
*** 1548,1554 ****
  	child = this->child;
  	child->is_detached = start_detached;
  #ifdef __WINDOWS__
! 	this->thread = (HANDLE)_beginthread(run_child_thread, 0, child);
  	if(this->thread != (HANDLE)-1L) {
  		this->state = TSTATE_STARTED;
  		if(start_detached) {
--- 1549,1555 ----
  	child = this->child;
  	child->is_detached = start_detached;
  #ifdef __WINDOWS__
! 	this->thread = (HANDLE)_beginthreadex(NULL, 0, run_child_thread, child, 0, NULL);
  	if(this->thread != (HANDLE)-1L) {
  		this->state = TSTATE_STARTED;
  		if(start_detached) {
***************
*** 1570,1584 ****
  	return rc;
  }
  
! static int llthread_join(Lua_LLThread *this) {
  #ifdef __WINDOWS__
! 	WaitForSingleObject( this->thread, INFINITE );
! 	/* Destroy the thread object. */
! 	CloseHandle( this->thread );
! 
! 	this->state |= TSTATE_JOINED;
! 
! 	return 0;
  #else
  	int rc;
  
--- 1571,1595 ----
  	return rc;
  }
  
! static int llthread_join(Lua_LLThread *this
  #ifdef __WINDOWS__
! , DWORD timeout
! #endif
! ) {
! #ifdef __WINDOWS__
! 	DWORD ret = 0;
! 	if(INVALID_HANDLE_VALUE == this->thread) return 0;
! 	ret = WaitForSingleObject( this->thread, timeout );
! 	if( ret == WAIT_OBJECT_0){ /* Destroy the thread object. */
! 		CloseHandle( this->thread );
! 		this->thread = INVALID_HANDLE_VALUE;
! 		this->state |= TSTATE_JOINED;
! 		return 0;
! 	}
! 	else if( ret == WAIT_TIMEOUT ){
! 		return 1;
! 	}
! 	return 2;
  #else
  	int rc;
  
***************
*** 1591,1596 ****
--- 1602,1618 ----
  #endif
  }
  
+ #ifdef __WINDOWS__
+ static int llthread_kill(Lua_LLThread *this, DWORD exit_code){
+ 	BOOL ret = TRUE;
+ 	if(INVALID_HANDLE_VALUE != this->thread){
+ 		ret = TerminateThread(this->thread, exit_code);
+ 		this->thread = INVALID_HANDLE_VALUE;
+ 	}
+ 	return ret;
+ }
+ #endif
+ 
  typedef struct {
  	lua_State *from_L;
  	lua_State *to_L;
***************
*** 1788,1794 ****
  	if((this_idx1->state & TSTATE_STARTED) == TSTATE_STARTED &&
  			(this_idx1->state & (TSTATE_DETACHED|TSTATE_JOINED)) == 0) {
  		/* then join the thread. */
! 		llthread_join(this_idx1);
  		child = this_idx1->child;
  		if(child && child->status != 0) {
  			const char *err_msg = lua_tostring(child->L, -1);
--- 1810,1820 ----
  	if((this_idx1->state & TSTATE_STARTED) == TSTATE_STARTED &&
  			(this_idx1->state & (TSTATE_DETACHED|TSTATE_JOINED)) == 0) {
  		/* then join the thread. */
! 		llthread_join(this_idx1
! #ifdef __WINDOWS__
! 			, INFINITE
! #endif
! 		);
  		child = this_idx1->child;
  		if(child && child->status != 0) {
  			const char *err_msg = lua_tostring(child->L, -1);
***************
*** 1855,1861 ****
  		return 2;
  	}
  	/* join the thread. */
! 	rc = llthread_join(this_idx1);
  	child = this_idx1->child;
  
  	/* Push all results after the Lua code. */
--- 1881,1891 ----
  		return 2;
  	}
  	/* join the thread. */
! 	rc = llthread_join(this_idx1
! #ifdef __WINDOWS__
! 		,luaL_optint(L, 2, INFINITE)
! #endif
! 	);
  	child = this_idx1->child;
  
  	/* Push all results after the Lua code. */
***************
*** 1873,1879 ****
  		}
  		llthread_cleanup_child(this_idx1);
  		return top;
! 	} else {
  		res_idx1 = false;
  		err_msg_idx2 = buf;
  		strerror_r(errno, buf, ERROR_LEN);
--- 1903,1917 ----
  		}
  		llthread_cleanup_child(this_idx1);
  		return top;
! 	}
! #ifdef __WINDOWS__
! 	else if( rc == 1 ){
! 		lua_pushboolean(L, 0);
! 		lua_pushstring(L, "timeout");
! 		return 2;
! 	} 
! #endif
! 	else {
  		res_idx1 = false;
  		err_msg_idx2 = buf;
  		strerror_r(errno, buf, ERROR_LEN);
***************
*** 1885,1890 ****
--- 1923,1949 ----
    return 2;
  }
  
+ /* method: kill */
+ #ifdef __WINDOWS__
+ 
+ static int Lua_LLThread__kill__meth(lua_State *L) {
+   Lua_LLThread * this_idx1 = obj_type_Lua_LLThread_check(L,1);
+   int rc;
+ 
+   /* join the thread. */
+   rc = llthread_kill(this_idx1, -1);
+   if( rc == 0 ){
+     lua_pushboolean(L, 0);
+     lua_pushinteger(L, GetLastError());
+     return 2;
+   } 
+   lua_pushboolean(L, 1);
+   return 1;
+ }
+ 
+ #endif
+ 
+ 
  /* method: new */
  static int llthreads__new__func(lua_State *L) {
    size_t lua_code_len_idx1;
***************
*** 1907,1912 ****
--- 1966,1974 ----
  static const luaL_Reg obj_Lua_LLThread_methods[] = {
    {"start", Lua_LLThread__start__meth},
    {"join", Lua_LLThread__join__meth},
+ #ifdef __WINDOWS__
+   {"kill", Lua_LLThread__kill__meth},
+ #endif
    {NULL, NULL}
  };
  
